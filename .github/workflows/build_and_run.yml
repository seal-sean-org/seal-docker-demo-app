name: "Seal Security ASP.NET Demo"

on:
  workflow_dispatch:
    inputs:
      app_fix_mode:
        description: "Application vulnerability fix mode"
        type: choice
        options: ["all", "remote", "local"]
        default: "all"
      os_fix_mode:
        description: "OS vulnerability fix mode"
        type: choice
        options: ["all", "remote", "local"]
        default: "all"
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DEMO_IMAGE: seal-demo-app
  DOCKERFILE_PATH: fixed.Dockerfile

jobs:
  security-demo:
    name: Build & Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Seal-secured image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          tags: ${{ env.DEMO_IMAGE }}:latest
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          secrets: |
            SEAL_TOKEN=${{ secrets.DEMO_SEAL_TOKEN }}
          build-args: |
            SEAL_APP_FIX_MODE=${{ inputs.app_fix_mode || 'all' }}
            SEAL_OS_FIX_MODE=${{ inputs.os_fix_mode || 'all' }}
            SEAL_PROJECT_ID=${{ secrets.SEAL_PROJECT_ID || 'seal-docker-demo-app' }}

      - name: Run application container
        run: |
          # Create network for app and ngrok communication
          docker network create demo-network || true
          
          # Run the vulnerable application
          docker run -d --name ${{ env.DEMO_IMAGE }} --network demo-network -p 8080:80 ${{ env.DEMO_IMAGE }}:latest
          
          # Wait for container to be ready
          sleep 5
          echo "‚úÖ Application running at http://localhost:8080"

      - name: Setup ngrok tunnel for live demo
        if: ${{ secrets.NGROK_AUTHTOKEN }}
        run: |
          # Stop any existing ngrok tunnels
          docker stop ngrok 2>/dev/null || true
          docker rm ngrok 2>/dev/null || true
          
          # Clear existing tunnels via API if auth token available
          if [ -n "${{ secrets.NGROK_AUTHTOKEN }}" ]; then
            echo "üîß Clearing existing ngrok tunnels..."
            curl -s -H "Authorization: Bearer ${{ secrets.NGROK_AUTHTOKEN }}" \
                 -H "Ngrok-Version: 2" \
                 https://api.ngrok.com/tunnels 2>/dev/null | \
            jq -r '.tunnels[]?.id // empty' 2>/dev/null | \
            while read tunnel_id; do
              if [ -n "$tunnel_id" ]; then
                curl -s -X DELETE \
                     -H "Authorization: Bearer ${{ secrets.NGROK_AUTHTOKEN }}" \
                     -H "Ngrok-Version: 2" \
                     "https://api.ngrok.com/tunnels/$tunnel_id" 2>/dev/null || true
              fi
            done
            sleep 2
          fi
          
          # Configure ngrok flags
          flags="--authtoken=${{ secrets.NGROK_AUTHTOKEN }}"
          if [ -n "${{ secrets.NGROK_DOMAIN }}" ]; then 
            flags="$flags --hostname=${{ secrets.NGROK_DOMAIN }}"
          fi
          
          # Start ngrok tunnel pointing to the app container
          echo "üåê Starting ngrok tunnel..."
          docker run -d --name ngrok --network demo-network \
            ngrok/ngrok http ${{ env.DEMO_IMAGE }}:80 $flags || {
            echo "Failed with custom domain, trying with random URL..."
            docker rm ngrok 2>/dev/null || true
            docker run -d --name ngrok --network demo-network \
              ngrok/ngrok http ${{ env.DEMO_IMAGE }}:80 --authtoken=${{ secrets.NGROK_AUTHTOKEN }}
          }
          
          # Wait for tunnel to establish
          sleep 10
          
          # Get the public URL
          NGROK_URL=$(docker logs ngrok 2>&1 | grep -o 'https://[^[:space:]]*\.ngrok[^[:space:]]*' | head -1)
          if [ -n "$NGROK_URL" ]; then
            echo "üéØ **LIVE DEMO URL: $NGROK_URL**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üö® Try the Vulnerability:" >> $GITHUB_STEP_SUMMARY
            echo "1. Visit: [$NGROK_URL]($NGROK_URL)" >> $GITHUB_STEP_SUMMARY
            echo '2. Enter this JSON: `{ "$type": "System.Version, System.Private.CoreLib", "Major": 1, "Minor": 2 }`' >> $GITHUB_STEP_SUMMARY
            echo "3. Click 'Deserialize' to see insecure deserialization in action!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ö†Ô∏è **This demonstrates CVE-2024-21907 and CWE-502 vulnerabilities**" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Failed to get ngrok URL" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Security scan with Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          # Install and authenticate Snyk CLI
          curl -Lo snyk "https://github.com/snyk/cli/releases/latest/download/snyk-linux"
          chmod +x snyk && sudo mv snyk /usr/local/bin/
          snyk auth $SNYK_TOKEN
          
          # Configure organization if provided
          if [ -n "${{ secrets.SNYK_ORG }}" ]; then
            export SNYK_ORG="${{ secrets.SNYK_ORG }}"
            ORG_FLAG="--org=$SNYK_ORG"
          fi
          
          # Perform container security scan
          echo "üîç Scanning container for vulnerabilities..."
          snyk container test ${{ env.DEMO_IMAGE }}:latest \
            --severity-threshold=medium \
            --project-name="${{ github.repository }}" \
            --file=${{ env.DOCKERFILE_PATH }} \
            ${ORG_FLAG:-} \
            --json-file-output=snyk-results.json || true
          
          # Generate summary report
          snyk container test ${{ env.DEMO_IMAGE }}:latest \
            --severity-threshold=medium \
            ${ORG_FLAG:-} > snyk-summary.txt || true
          
          # Add results to job summary
          echo "## üõ°Ô∏è Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          head -50 snyk-summary.txt >> $GITHUB_STEP_SUMMARY || echo "Scan completed - check artifacts for details" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            snyk-results.json
            snyk-summary.txt

      - name: Keep demo alive for testing
        if: ${{ secrets.NGROK_AUTHTOKEN }}
        run: |
          echo "üïê Keeping demo alive for 10 minutes for testing..."
          echo "Check the job summary above for the live demo URL"
          # Keep tunnel alive for demo purposes
          timeout 600 docker logs -f ngrok || echo "Demo session ended"

      - name: Cleanup
        if: always()
        run: |
          docker stop ${{ env.DEMO_IMAGE }} || true
          docker stop ngrok || true
          docker network rm demo-network || true
          docker system prune -f